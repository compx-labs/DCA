/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,uint64,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "optInToAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addMBR(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSwapParams(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateSwapManagerAccount(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initiateSwap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receiveSwap(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendSwappedTokens(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "mbr": {
          "type": "uint64",
          "key": "mbr"
        },
        "swappedTokenBalance": {
          "type": "uint64",
          "key": "swappedTokenBalance"
        },
        "lastUpdated": {
          "type": "uint64",
          "key": "lastUpdated"
        },
        "orchestratorAddress": {
          "type": "bytes",
          "key": "orchestratorAddress"
        },
        "swapManagerAccount": {
          "type": "bytes",
          "key": "swapManagerAccount"
        },
        "userAddress": {
          "type": "bytes",
          "key": "userAddress"
        },
        "SwapToTokenId": {
          "type": "uint64",
          "key": "SwapToTokenId"
        },
        "swapAmount": {
          "type": "uint64",
          "key": "swapAmount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "Swap",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "orchestratorAddress",
            "type": "address"
          },
          {
            "name": "swapToken",
            "type": "uint64"
          },
          {
            "name": "swapManagerAccount",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addMBR",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setSwapParams",
        "args": [
          {
            "name": "swapAmount",
            "type": "uint64"
          },
          {
            "name": "SwapToTokenId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateSwapManagerAccount",
        "args": [
          {
            "name": "swapManagerAccount",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initiateSwap",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "receiveSwap",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendSwappedTokens",
        "args": [
          {
            "name": "sendToAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Swap smart contract.
 */
export type Swap = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,uint64,address)void' | 'createApplication', {
      argsObj: {
        orchestratorAddress: string
        swapToken: bigint | number
        swapManagerAccount: string
      }
      argsTuple: [orchestratorAddress: string, swapToken: bigint | number, swapManagerAccount: string]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optInToAsset(uint64)void' | 'optInToAsset', {
      argsObj: {
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'addMBR(pay,uint64)void' | 'addMBR', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'setSwapParams(uint64,uint64)void' | 'setSwapParams', {
      argsObj: {
        swapAmount: bigint | number
        SwapToTokenId: bigint | number
      }
      argsTuple: [swapAmount: bigint | number, SwapToTokenId: bigint | number]
      returns: void
    }>
    & Record<'updateSwapManagerAccount(address)void' | 'updateSwapManagerAccount', {
      argsObj: {
        swapManagerAccount: string
      }
      argsTuple: [swapManagerAccount: string]
      returns: void
    }>
    & Record<'initiateSwap()void' | 'initiateSwap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'receiveSwap(axfer,uint64)void' | 'receiveSwap', {
      argsObj: {
        axferTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [axferTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'sendSwappedTokens(address)void' | 'sendSwappedTokens', {
      argsObj: {
        sendToAddress: string
      }
      argsTuple: [sendToAddress: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'mbr'?: IntegerState
      'swappedTokenBalance'?: IntegerState
      'lastUpdated'?: IntegerState
      'orchestratorAddress'?: BinaryState
      'swapManagerAccount'?: BinaryState
      'userAddress'?: BinaryState
      'SwapToTokenId'?: IntegerState
      'swapAmount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type SwapSig = keyof Swap['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends SwapSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Swap smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends SwapSig> = Swap['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Swap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SwapSig> = Swap['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type SwapCreateCalls = (typeof SwapCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type SwapCreateCallParams =
  | (TypedCallParams<'createApplication(address,uint64,address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type SwapDeleteCalls = (typeof SwapCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type SwapDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type SwapDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: SwapCreateCalls) => SwapCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: SwapDeleteCalls) => SwapDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class SwapCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Swap smart contract using the createApplication(address,uint64,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,uint64,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.orchestratorAddress, args.swapToken, args.swapManagerAccount],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Swap smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsset(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToAsset(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addMBR(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addMbr(args: MethodArgs<'addMBR(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addMBR(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setSwapParams(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSwapParams(args: MethodArgs<'setSwapParams(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setSwapParams(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.swapAmount, args.SwapToTokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateSwapManagerAccount(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateSwapManagerAccount(args: MethodArgs<'updateSwapManagerAccount(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateSwapManagerAccount(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.swapManagerAccount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initiateSwap()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initiateSwap(args: MethodArgs<'initiateSwap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initiateSwap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the receiveSwap(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static receiveSwap(args: MethodArgs<'receiveSwap(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'receiveSwap(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.axferTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendSwappedTokens(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendSwappedTokens(args: MethodArgs<'sendSwappedTokens(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendSwappedTokens(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sendToAddress],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Swap smart contract
 */
export class SwapClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `SwapClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Swap['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Swap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: SwapDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(SwapCallFactory.create)
    const deleteArgs = params.deleteCall?.(SwapCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Swap smart contract using the createApplication(address,uint64,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,uint64,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address,uint64,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(SwapCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Swap smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(SwapCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Swap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optInToAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.optInToAsset(args, params))
  }

  /**
   * Calls the addMBR(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addMbr(args: MethodArgs<'addMBR(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.addMbr(args, params))
  }

  /**
   * Calls the setSwapParams(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSwapParams(args: MethodArgs<'setSwapParams(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.setSwapParams(args, params))
  }

  /**
   * Calls the updateSwapManagerAccount(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateSwapManagerAccount(args: MethodArgs<'updateSwapManagerAccount(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.updateSwapManagerAccount(args, params))
  }

  /**
   * Calls the initiateSwap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initiateSwap(args: MethodArgs<'initiateSwap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.initiateSwap(args, params))
  }

  /**
   * Calls the receiveSwap(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public receiveSwap(args: MethodArgs<'receiveSwap(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.receiveSwap(args, params))
  }

  /**
   * Calls the sendSwappedTokens(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendSwappedTokens(args: MethodArgs<'sendSwappedTokens(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(SwapCallFactory.sendSwappedTokens(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Swap['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get mbr() {
        return SwapClient.getIntegerState(state, 'mbr')
      },
      get swappedTokenBalance() {
        return SwapClient.getIntegerState(state, 'swappedTokenBalance')
      },
      get lastUpdated() {
        return SwapClient.getIntegerState(state, 'lastUpdated')
      },
      get orchestratorAddress() {
        return SwapClient.getBinaryState(state, 'orchestratorAddress')
      },
      get swapManagerAccount() {
        return SwapClient.getBinaryState(state, 'swapManagerAccount')
      },
      get userAddress() {
        return SwapClient.getBinaryState(state, 'userAddress')
      },
      get SwapToTokenId() {
        return SwapClient.getIntegerState(state, 'SwapToTokenId')
      },
      get swapAmount() {
        return SwapClient.getIntegerState(state, 'swapAmount')
      },
    }
  }

  public compose(): SwapComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addMbr(args: MethodArgs<'addMBR(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addMbr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setSwapParams(args: MethodArgs<'setSwapParams(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSwapParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateSwapManagerAccount(args: MethodArgs<'updateSwapManagerAccount(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateSwapManagerAccount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initiateSwap(args: MethodArgs<'initiateSwap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initiateSwap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      receiveSwap(args: MethodArgs<'receiveSwap(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.receiveSwap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendSwappedTokens(args: MethodArgs<'sendSwappedTokens(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendSwappedTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as SwapComposer
  }
}
export type SwapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'optInToAsset(uint64)void'>]>

  /**
   * Calls the addMBR(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addMbr(args: MethodArgs<'addMBR(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'addMBR(pay,uint64)void'>]>

  /**
   * Calls the setSwapParams(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSwapParams(args: MethodArgs<'setSwapParams(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'setSwapParams(uint64,uint64)void'>]>

  /**
   * Calls the updateSwapManagerAccount(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSwapManagerAccount(args: MethodArgs<'updateSwapManagerAccount(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'updateSwapManagerAccount(address)void'>]>

  /**
   * Calls the initiateSwap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initiateSwap(args: MethodArgs<'initiateSwap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'initiateSwap()void'>]>

  /**
   * Calls the receiveSwap(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receiveSwap(args: MethodArgs<'receiveSwap(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'receiveSwap(axfer,uint64)void'>]>

  /**
   * Calls the sendSwappedTokens(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendSwappedTokens(args: MethodArgs<'sendSwappedTokens(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, MethodReturn<'sendSwappedTokens(address)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Swap smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): SwapComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Swap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): SwapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): SwapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<SwapComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<SwapComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type SwapComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type SwapComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
