{
  "hints": {
    "createApplication(address,address,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateParams(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fundAlgo(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fundAsset(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFunds(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimBuyTokens()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferFundsForSwap(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receiveBoughtTokensAlgo(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receiveBoughtTokensAsset(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "balanceTokenId": {
          "type": "uint64",
          "key": "balanceTokenId"
        },
        "currentBalance": {
          "type": "uint64",
          "key": "currentBalance"
        },
        "buyTokenId": {
          "type": "uint64",
          "key": "buyTokenId"
        },
        "buyTokenBalance": {
          "type": "uint64",
          "key": "buyTokenBalance"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "buyTokenReceiver": {
          "type": "bytes",
          "key": "buyTokenReceiver"
        },
        "buyIntervalSeconds": {
          "type": "uint64",
          "key": "buyIntervalSeconds"
        },
        "buyIntervalAmount": {
          "type": "uint64",
          "key": "buyIntervalAmount"
        },
        "swapWalletAddress": {
          "type": "bytes",
          "key": "swapWalletAddress"
        },
        "targetSpend": {
          "type": "uint64",
          "key": "targetSpend"
        },
        "lastUpdated": {
          "type": "uint64",
          "key": "lastUpdated"
        },
        "buyingTokens": {
          "type": "bytes",
          "key": "buyingTokens"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "DCA",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          },
          {
            "name": "buyTokenReceiver",
            "type": "address"
          },
          {
            "name": "balanceTokenId",
            "type": "uint64"
          },
          {
            "name": "buyTokenId",
            "type": "uint64"
          },
          {
            "name": "buyIntervalSeconds",
            "type": "uint64"
          },
          {
            "name": "targetSpend",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateParams",
        "args": [
          {
            "name": "_buyIntervalSeconds",
            "type": "uint64"
          },
          {
            "name": "_targetSpend",
            "type": "uint64"
          },
          {
            "name": "_targetBuy",
            "type": "uint64"
          },
          {
            "name": "_endTime",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fundAlgo",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fundAsset",
        "args": [
          {
            "name": "assetTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeFunds",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimBuyTokens",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferFundsForSwap",
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "receiveBoughtTokensAlgo",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "receiveBoughtTokensAsset",
        "args": [
          {
            "name": "assetTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}