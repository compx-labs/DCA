#pragma version 9

// This TEAL was generated by TEALScript v0.100.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address)void
*abi_route_createApplication:
	// orchestratorAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (orchestratorAddress) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	int 1
	return

// createApplication(orchestratorAddress: Address): void
createApplication:
	proto 1 0

	// contracts/Fund.algo.ts:18
	// this.userAddress.value = this.txn.sender
	byte 0x7573657241646472657373 // "userAddress"
	txn Sender
	app_global_put

	// contracts/Fund.algo.ts:19
	// this.orchestratorAddress.value = orchestratorAddress
	byte 0x6f7263686573747261746f7241646472657373 // "orchestratorAddress"
	frame_dig -1 // orchestratorAddress: Address
	app_global_put

	// contracts/Fund.algo.ts:20
	// this.currentBalance.value = 0
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	int 0
	app_global_put

	// contracts/Fund.algo.ts:21
	// this.lastUpdated.value = globals.latestTimestamp
	byte 0x6c61737455706461746564 // "lastUpdated"
	global LatestTimestamp
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/Fund.algo.ts:25
	// assert(this.txn.sender === this.userAddress.value, "Only user can delete application")
	txn Sender
	byte 0x7573657241646472657373 // "userAddress"
	app_global_get
	==

	// Only user can delete application
	assert
	retsub

// addFunds(pay,uint64)void
*abi_route_addFunds:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for addFunds must be a pay transaction
	assert

	// execute addFunds(pay,uint64)void
	callsub addFunds
	int 1
	return

// addFunds(payTxn: PayTxn, quantity: uint64): void
addFunds:
	proto 2 0

	// contracts/Fund.algo.ts:30
	// assert(this.txn.sender == this.userAddress.value, "Only user can fund")
	txn Sender
	byte 0x7573657241646472657373 // "userAddress"
	app_global_get
	==

	// Only user can fund
	assert

	// contracts/Fund.algo.ts:32
	// verifyPayTxn(payTxn, {
	//             sender: this.userAddress.value,
	//             receiver: this.app.address,
	//             amount: quantity,
	//         })
	// verify sender
	frame_dig -1 // payTxn: PayTxn
	gtxns Sender
	byte 0x7573657241646472657373 // "userAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"payTxn","field":"sender","expected":"this.userAddress.value"}
	assert

	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity"}
	assert

	// contracts/Fund.algo.ts:37
	// this.currentBalance.value += payTxn.amount
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	swap
	app_global_put

	// contracts/Fund.algo.ts:38
	// this.lastUpdated.value = globals.latestTimestamp
	byte 0x6c61737455706461746564 // "lastUpdated"
	global LatestTimestamp
	app_global_put
	retsub

// removeFunds(uint64)void
*abi_route_removeFunds:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeFunds(uint64)void
	callsub removeFunds
	int 1
	return

// removeFunds(quantity: uint64): void
removeFunds:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Fund.algo.ts:43
	// assert(this.txn.sender == this.userAddress.value, "Only user can remove funds")
	txn Sender
	byte 0x7573657241646472657373 // "userAddress"
	app_global_get
	==

	// Only user can remove funds
	assert

	// contracts/Fund.algo.ts:44
	// amount = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // amount: uint64

	// *if0_condition
	// contracts/Fund.algo.ts:45
	// amount === 0
	frame_dig 0 // amount: uint64
	int 0
	==
	bz *if0_end

	// *if0_consequent
	// contracts/Fund.algo.ts:46
	// amount = this.currentBalance.value - 1000
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	app_global_get
	int 1000
	-
	frame_bury 0 // amount: uint64

*if0_end:
	// contracts/Fund.algo.ts:48
	// sendPayment(
	//             {
	//                 amount: amount,
	//                 receiver: this.userAddress.value,
	//                 fee: 1000,
	//             }
	//         )
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/Fund.algo.ts:50
	// amount: amount
	frame_dig 0 // amount: uint64
	itxn_field Amount

	// contracts/Fund.algo.ts:51
	// receiver: this.userAddress.value
	byte 0x7573657241646472657373 // "userAddress"
	app_global_get
	itxn_field Receiver

	// contracts/Fund.algo.ts:52
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Fund.algo.ts:55
	// this.currentBalance.value -= amount
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	app_global_get
	frame_dig 0 // amount: uint64
	-
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	swap
	app_global_put

	// contracts/Fund.algo.ts:56
	// this.lastUpdated.value = globals.latestTimestamp
	byte 0x6c61737455706461746564 // "lastUpdated"
	global LatestTimestamp
	app_global_put
	retsub

// sendFunds(uint64,address)void
*abi_route_sendFunds:
	// sendToAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (sendToAddress) for sendFunds must be a address
	assert

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute sendFunds(uint64,address)void
	callsub sendFunds
	int 1
	return

// sendFunds(quantity: uint64, sendToAddress: Address): void
sendFunds:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Fund.algo.ts:61
	// assert(this.txn.sender == this.orchestratorAddress.value, "Only orchestrator can send funds to nominated accounts")
	txn Sender
	byte 0x6f7263686573747261746f7241646472657373 // "orchestratorAddress"
	app_global_get
	==

	// Only orchestrator can send funds to nominated accounts
	assert

	// contracts/Fund.algo.ts:62
	// amount = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // amount: uint64

	// *if1_condition
	// contracts/Fund.algo.ts:63
	// amount === 0
	frame_dig 0 // amount: uint64
	int 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/Fund.algo.ts:64
	// amount = this.currentBalance.value
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	app_global_get
	frame_bury 0 // amount: uint64

*if1_end:
	// contracts/Fund.algo.ts:66
	// sendPayment(
	//             {
	//                 amount: amount,
	//                 receiver: sendToAddress,
	//                 fee: 1000,
	//             }
	//         )
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/Fund.algo.ts:68
	// amount: amount
	frame_dig 0 // amount: uint64
	itxn_field Amount

	// contracts/Fund.algo.ts:69
	// receiver: sendToAddress
	frame_dig -2 // sendToAddress: Address
	itxn_field Receiver

	// contracts/Fund.algo.ts:70
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Fund.algo.ts:73
	// this.currentBalance.value -= amount
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	app_global_get
	frame_dig 0 // amount: uint64
	-
	byte 0x63757272656e7442616c616e6365 // "currentBalance"
	swap
	app_global_put

	// contracts/Fund.algo.ts:74
	// this.lastUpdated.value = globals.latestTimestamp
	byte 0x6c61737455706461746564 // "lastUpdated"
	global LatestTimestamp
	app_global_put
	retsub

*create_NoOp:
	method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "addFunds(pay,uint64)void"
	method "removeFunds(uint64)void"
	method "sendFunds(uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_addFunds *abi_route_removeFunds *abi_route_sendFunds

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err