/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "fundAlgo(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateParams(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimBuyTokens()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeFunds(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "balanceTokenId": {
          "type": "uint64",
          "key": "balanceTokenId"
        },
        "currentBalance": {
          "type": "uint64",
          "key": "currentBalance"
        },
        "buyTokenId": {
          "type": "uint64",
          "key": "buyTokenId"
        },
        "buyTokenBalance": {
          "type": "uint64",
          "key": "buyTokenBalance"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "buyTokenReceiver": {
          "type": "bytes",
          "key": "buyTokenReceiver"
        },
        "buyIntervalSeconds": {
          "type": "uint64",
          "key": "buyIntervalSeconds"
        },
        "targetSpend": {
          "type": "uint64",
          "key": "targetSpend"
        },
        "targetBuy": {
          "type": "uint64",
          "key": "targetBuy"
        },
        "startTime": {
          "type": "uint64",
          "key": "startTime"
        },
        "endTime": {
          "type": "uint64",
          "key": "endTime"
        },
        "lastUpdated": {
          "type": "uint64",
          "key": "lastUpdated"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "DCA",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          },
          {
            "name": "buyTokenReceiver",
            "type": "address"
          },
          {
            "name": "balanceTokenId",
            "type": "uint64"
          },
          {
            "name": "buyTokenId",
            "type": "uint64"
          },
          {
            "name": "buyIntervalSeconds",
            "type": "uint64"
          },
          {
            "name": "targetSpend",
            "type": "uint64"
          },
          {
            "name": "targetBuy",
            "type": "uint64"
          },
          {
            "name": "endTime",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fundAlgo",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateParams",
        "args": [
          {
            "name": "_buyIntervalSeconds",
            "type": "uint64"
          },
          {
            "name": "_targetSpend",
            "type": "uint64"
          },
          {
            "name": "_targetBuy",
            "type": "uint64"
          },
          {
            "name": "_endTime",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimBuyTokens",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeFunds",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Dca smart contract.
 */
export type Dca = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: {
        adminAddress: string
        buyTokenReceiver: string
        balanceTokenId: bigint | number
        buyTokenId: bigint | number
        buyIntervalSeconds: bigint | number
        targetSpend: bigint | number
        targetBuy: bigint | number
        endTime: bigint | number
      }
      argsTuple: [adminAddress: string, buyTokenReceiver: string, balanceTokenId: bigint | number, buyTokenId: bigint | number, buyIntervalSeconds: bigint | number, targetSpend: bigint | number, targetBuy: bigint | number, endTime: bigint | number]
      returns: void
    }>
    & Record<'fundAlgo(pay,uint64)void' | 'fundAlgo', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'updateParams(uint64,uint64,uint64,uint64)void' | 'updateParams', {
      argsObj: {
        _buyIntervalSeconds: bigint | number
        _targetSpend: bigint | number
        _targetBuy: bigint | number
        _endTime: bigint | number
      }
      argsTuple: [_buyIntervalSeconds: bigint | number, _targetSpend: bigint | number, _targetBuy: bigint | number, _endTime: bigint | number]
      returns: void
    }>
    & Record<'claimBuyTokens()void' | 'claimBuyTokens', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'removeFunds(uint64)void' | 'removeFunds', {
      argsObj: {
        quantity: bigint | number
      }
      argsTuple: [quantity: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'balanceTokenId'?: IntegerState
      'currentBalance'?: IntegerState
      'buyTokenId'?: IntegerState
      'buyTokenBalance'?: IntegerState
      'adminAddress'?: BinaryState
      'buyTokenReceiver'?: BinaryState
      'buyIntervalSeconds'?: IntegerState
      'targetSpend'?: IntegerState
      'targetBuy'?: IntegerState
      'startTime'?: IntegerState
      'endTime'?: IntegerState
      'lastUpdated'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DcaSig = keyof Dca['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DcaSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Dca smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DcaSig> = Dca['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Dca smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DcaSig> = Dca['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DcaCreateCalls = (typeof DcaCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DcaCreateCallParams =
  | (TypedCallParams<'createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DcaDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DcaCreateCalls) => DcaCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DcaCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DCA smart contract using the createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.adminAddress, args.buyTokenReceiver, args.balanceTokenId, args.buyTokenId, args.buyIntervalSeconds, args.targetSpend, args.targetBuy, args.endTime],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the fundAlgo(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundAlgo(args: MethodArgs<'fundAlgo(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fundAlgo(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateParams(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateParams(args: MethodArgs<'updateParams(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateParams(uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args._buyIntervalSeconds, args._targetSpend, args._targetBuy, args._endTime],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimBuyTokens()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimBuyTokens(args: MethodArgs<'claimBuyTokens()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimBuyTokens()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeFunds(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeFunds(args: MethodArgs<'removeFunds(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeFunds(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quantity],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DCA smart contract
 */
export class DcaClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DcaClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Dca['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DCA smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DcaDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DcaCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DCA smart contract using the createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address,address,uint64,uint64,uint64,uint64,uint64,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(DcaCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DCA smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the fundAlgo(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundAlgo(args: MethodArgs<'fundAlgo(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DcaCallFactory.fundAlgo(args, params))
  }

  /**
   * Calls the updateParams(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateParams(args: MethodArgs<'updateParams(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DcaCallFactory.updateParams(args, params))
  }

  /**
   * Calls the claimBuyTokens()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimBuyTokens(args: MethodArgs<'claimBuyTokens()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DcaCallFactory.claimBuyTokens(args, params))
  }

  /**
   * Calls the removeFunds(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeFunds(args: MethodArgs<'removeFunds(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DcaCallFactory.removeFunds(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Dca['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get balanceTokenId() {
        return DcaClient.getIntegerState(state, 'balanceTokenId')
      },
      get currentBalance() {
        return DcaClient.getIntegerState(state, 'currentBalance')
      },
      get buyTokenId() {
        return DcaClient.getIntegerState(state, 'buyTokenId')
      },
      get buyTokenBalance() {
        return DcaClient.getIntegerState(state, 'buyTokenBalance')
      },
      get adminAddress() {
        return DcaClient.getBinaryState(state, 'adminAddress')
      },
      get buyTokenReceiver() {
        return DcaClient.getBinaryState(state, 'buyTokenReceiver')
      },
      get buyIntervalSeconds() {
        return DcaClient.getIntegerState(state, 'buyIntervalSeconds')
      },
      get targetSpend() {
        return DcaClient.getIntegerState(state, 'targetSpend')
      },
      get targetBuy() {
        return DcaClient.getIntegerState(state, 'targetBuy')
      },
      get startTime() {
        return DcaClient.getIntegerState(state, 'startTime')
      },
      get endTime() {
        return DcaClient.getIntegerState(state, 'endTime')
      },
      get lastUpdated() {
        return DcaClient.getIntegerState(state, 'lastUpdated')
      },
    }
  }

  public compose(): DcaComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      fundAlgo(args: MethodArgs<'fundAlgo(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundAlgo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateParams(args: MethodArgs<'updateParams(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimBuyTokens(args: MethodArgs<'claimBuyTokens()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimBuyTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeFunds(args: MethodArgs<'removeFunds(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeFunds(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DcaComposer
  }
}
export type DcaComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the fundAlgo(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundAlgo(args: MethodArgs<'fundAlgo(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DcaComposer<[...TReturns, MethodReturn<'fundAlgo(pay,uint64)void'>]>

  /**
   * Calls the updateParams(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateParams(args: MethodArgs<'updateParams(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DcaComposer<[...TReturns, MethodReturn<'updateParams(uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the claimBuyTokens()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimBuyTokens(args: MethodArgs<'claimBuyTokens()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DcaComposer<[...TReturns, MethodReturn<'claimBuyTokens()void'>]>

  /**
   * Calls the removeFunds(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeFunds(args: MethodArgs<'removeFunds(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DcaComposer<[...TReturns, MethodReturn<'removeFunds(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the DCA smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DcaComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DcaComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DcaComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DcaComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DcaComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DcaComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
