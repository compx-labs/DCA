{
  "hints": {
    "createApplication(address,uint64,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "optInToAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addMBR(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSwapParams(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateSwapManagerAccount(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initiateSwap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receiveSwap(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendSwappedTokens(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "mbr": {
          "type": "uint64",
          "key": "mbr"
        },
        "swappedTokenBalance": {
          "type": "uint64",
          "key": "swappedTokenBalance"
        },
        "lastUpdated": {
          "type": "uint64",
          "key": "lastUpdated"
        },
        "orchestratorAddress": {
          "type": "bytes",
          "key": "orchestratorAddress"
        },
        "swapManagerAccount": {
          "type": "bytes",
          "key": "swapManagerAccount"
        },
        "userAddress": {
          "type": "bytes",
          "key": "userAddress"
        },
        "SwapToTokenId": {
          "type": "uint64",
          "key": "SwapToTokenId"
        },
        "swapAmount": {
          "type": "uint64",
          "key": "swapAmount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "DCA",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "orchestratorAddress",
            "type": "address"
          },
          {
            "name": "swapToken",
            "type": "uint64"
          },
          {
            "name": "swapManagerAccount",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addMBR",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setSwapParams",
        "args": [
          {
            "name": "swapAmount",
            "type": "uint64"
          },
          {
            "name": "SwapToTokenId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateSwapManagerAccount",
        "args": [
          {
            "name": "swapManagerAccount",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initiateSwap",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "receiveSwap",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendSwappedTokens",
        "args": [
          {
            "name": "sendToAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}